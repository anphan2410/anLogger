Option Explicit

Public Function unfilterSheet(aSheet As Worksheet)
    If aSheet.FilterMode Then
        aSheet.AutoFilterMode = False
        On Error Resume Next
        aSheet.ShowAllData
        On Error GoTo 0
    End If
End Function

Public Function isSheetExistent(Sheet As String)
    Dim aSheet As Worksheet
    On Error Resume Next
    Set aSheet = ActiveWorkbook.Sheets(Sheet)
    On Error GoTo 0
    isSheetExistent = Not (aSheet Is Nothing)
End Function

Public Function clearSheet(Sheet As String) As Worksheet
    Dim tmpWs As Worksheet
    If isSheetExistent(Sheet) Then
        Set tmpWs = ActiveWorkbook.Sheets.Add(After:=ActiveWorkbook.Sheets(Sheet))
        Application.DisplayAlerts = False
        ActiveWorkbook.Sheets(Sheet).Delete
        Application.DisplayAlerts = True
    Else
        Set tmpWs = ActiveWorkbook.Sheets.Add(After:=ActiveWorkbook.Sheets(ActiveWorkbook.Sheets.Count))
    End If
    tmpWs.Name = Sheet
    Set clearSheet = tmpWs
End Function

Public Function lastNonBlankCellInColumn(ByRef aColumnRef As Range) As Range
'Input: any cell or range that belongs to the targeted column
'Return: last cell having data within the column
    Dim tmpWs As Worksheet
    Set tmpWs = aColumnRef.Parent
    Set lastNonBlankCellInColumn = tmpWs.Cells(tmpWs.Rows.Count, aColumnRef.Column).End(xlUp)
End Function

Public Function lastNonBlankCellInRow(ByRef aRowRef As Range) As Range
'Input: any cell or range that belongs to the targeted row
'Return: last cell having data within the row
    Dim tmpWs As Worksheet
    Set tmpWs = aRowRef.Parent
    Set lastNonBlankCellInRow = tmpWs.Cells(aRowRef.Row, tmpWs.Columns.Count).End(xlToLeft)
End Function

Public Function lastRangedRowWithMostFirstContinuousBoldCells(aSheet As Worksheet) As Range
'Input: a sheet object
'Return: the first range of a row containing the quantity of continuous bold cells in the sheet _
        , if there are more than one row with the same number of bold cells, _
            , then this returns the range of last row out of those selections.
Dim lastRowOfColumnA As Integer
lastRowOfColumnA = lastNonBlankCellInColumn(aSheet.Columns("A")).Row
Dim currentSelectedRow As Integer, currentNumbersOfContinuousBoldCellsInSelectedRow As Integer
Dim i As Integer, j As Integer, maxJ As Integer
For i = lastRowOfColumnA To 1 Step -1
    If aSheet.Cells(i, "A").Font.Bold = True Then
        maxJ = lastNonBlankCellInRow(aSheet.Cells(i, "A")).Column
        If maxJ > 1 Then
            For j = 2 To maxJ Step 1
                If aSheet.Cells(i, j).Font.Bold = False Then
                    j = j - 1
                    Exit For
                End If
            Next
            j = IIf(j > maxJ, maxJ, j)
        Else
            j = 1
        End If
        If j > currentNumbersOfContinuousBoldCellsInSelectedRow Then
            currentNumbersOfContinuousBoldCellsInSelectedRow = j
            currentSelectedRow = i
        End If
    End If
Next
If currentSelectedRow > 0 Then
    Set lastRangedRowWithMostFirstContinuousBoldCells = aSheet.Range(aSheet.Cells(currentSelectedRow, 1), aSheet.Cells(currentSelectedRow, currentNumbersOfContinuousBoldCellsInSelectedRow))
Else
    Set lastRangedRowWithMostFirstContinuousBoldCells = Nothing
End If
End Function

Public Function getCollectionOfUniqueValuesFromRange(aRange As Range) As Collection
    Dim tmpReturn As New Collection
    Dim aValue As Variant
    Dim comparedString As String
    On Error Resume Next
    For Each aValue In aRange
        comparedString = Trim(aValue)
        If comparedString <> "" Then
            tmpReturn.Add Item:=aValue, Key:=comparedString
        End If
    Next
    On Error GoTo 0
    Set getCollectionOfUniqueValuesFromRange = tmpReturn
End Function

Public Function firstIndexOfItemInCollection(anItem As Variant, aCollection As Collection) As Integer
    Dim currentIndex As Integer
    For currentIndex = 1 To aCollection.Count Step 1
        If aCollection.Item(currentIndex) = anItem Then
            firstIndexOfItemInCollection = currentIndex
            Exit Function
        End If
    Next
    firstIndexOfItemInCollection = 0
End Function

Sub createSonCustomMenuInAddinsTab()

    Dim cbMainMenuBar As CommandBar
    Dim iHelpMenu As Integer
    Dim cbcCutomMenu As CommandBarControl

    'Delete any existing one. We must use On Error Resume next _
    'in case it does not exist.
    On Error Resume Next
    Application.CommandBars("Worksheet Menu Bar").Controls("An").Delete
    On Error GoTo 0

    'Create a reference to the Worksheet Menu Bar object of the active worksheet
    Set cbMainMenuBar = Application.CommandBars("Worksheet Menu Bar")
     
    'Return the Index number of the Help menu. We can then use
    'this to place a custom menu before.
    iHelpMenu = cbMainMenuBar.Controls("Help").Index
     
    'Add a Control to the "Worksheet Menu Bar" before Help.
    'Set a CommandBarControl variable to it
    Set cbcCutomMenu = cbMainMenuBar.Controls.Add(Type:=msoControlPopup, Before:=iHelpMenu)
                  
    'Give the control a caption
    cbcCutomMenu.Caption = "An"
     
    'Working with our new Control, add a sub control and _
    'give it a Caption and tell it which macro to run (OnAction).
    With cbcCutomMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "parseAnLoggerDebugResult"
        .OnAction = "InputForFunction_parseAnLoggerDebugResult"
    End With
    
        With cbcCutomMenu.Controls.Add(Type:=msoControlButton)
        .Caption = "alternateRowColor"
        .OnAction = "alternateRowColor"
    End With
    
    
End Sub

Public Function InputForFunction_parseAnLoggerDebugResult()
    'On Error Resume Next
    parseAnLoggerDebugResult Application.GetOpenFilename()
    On Error GoTo 0
End Function

Public Function parseAnLoggerDebugResult(aFilePath As String, _
                                            Optional isThreadLocalized As Boolean = True, _
                                            Optional isFunctionLocalized As Boolean = True, _
                                            Optional isFileLocalized As Boolean = True, _
                                            Optional isLineLocalized As Boolean = True)
    Dim errorInfo As String
    'On Error GoTo ErrorHandler4parseAnLoggerDebugResult
    If Not (isThreadLocalized Or isFunctionLocalized Or isFileLocalized) Then
        errorInfo = "Invalid User Input !"
        GoTo ErrorHandler4parseAnLoggerDebugResult
    End If
    Dim currentWs As Worksheet
    Dim draftWs As Worksheet
    Set currentWs = ActiveSheet
    Set currentWs = clearSheet(currentWs.Name)
    Set draftWs = clearSheet(currentWs.Name & "Cache")
    
    Const indexColumnTime As Integer = 1
    Const indexColumnThread As Integer = 5
    Const indexColumnFunction As Integer = 4
    Const indexColumnFile As Integer = 3
    Const indexColumnLine As Integer = 2
    Const indexColumnMessage As Integer = 6
    
    draftWs.Cells(1, indexColumnTime).Value = "Time"
    draftWs.Cells(1, indexColumnThread).Value = "Thread"
    draftWs.Cells(1, indexColumnFunction).Value = "Function"
    draftWs.Cells(1, indexColumnFile).Value = "File"
    draftWs.Cells(1, indexColumnLine).Value = "Line"
    draftWs.Cells(1, indexColumnMessage).Value = "Message"
    
    Dim hdrRngDraftWs As Range
    Set hdrRngDraftWs = draftWs.Range("A1:F1")
    hdrRngDraftWs.Font.Bold = True
    
    Const firstDataRowDraftWs As Integer = 2
    Dim lastDataRowDraftWs As Long
    lastDataRowDraftWs = firstDataRowDraftWs - 1
    
    Dim FileNum As Integer
    Dim aLineOfText As String
    FileNum = FreeFile()
    
    Dim i As Long, j As Long, z As Long, k As Long
    
    Open aFilePath For Input As #FileNum
    Do Until EOF(FileNum)
        Line Input #FileNum, aLineOfText
        i = InStrRev(aLineOfText, "|")
        If i > 0 Then
            z = 0
            lastDataRowDraftWs = lastDataRowDraftWs + 1
            Do Until z = 5
                z = z + 1
                If z = 1 Or _
                        (z = 2 And isLineLocalized) Or _
                        (z = 3 And isFileLocalized) Or _
                        (z = 4 And isFunctionLocalized) Or _
                        (z = 5 And isThreadLocalized) Then
                    j = i - 1
                    i = InStrRev(aLineOfText, "|", j)
                    draftWs.Cells(lastDataRowDraftWs, z).Value = Mid(aLineOfText, i + 1, j - i)
                    j = i
                End If
            Loop
            k = InStr(1, aLineOfText, "<-") - 1
            If k > 0 Then
                draftWs.Cells(lastDataRowDraftWs, indexColumnMessage).Value = Trim(Replace(Left(aLineOfText, k), "=>", ""))
            End If
        End If
    Loop
    
    Dim TimePoints As Range
    Set TimePoints = draftWs.Range(draftWs.Cells(firstDataRowDraftWs, indexColumnTime), draftWs.Cells(lastDataRowDraftWs, indexColumnTime))
    
    Dim tmpRng As Range
    Set tmpRng = draftWs.Range(draftWs.Cells(firstDataRowDraftWs, indexColumnTime), draftWs.Cells(lastDataRowDraftWs, indexColumnTime + hdrRngDraftWs.Count - 1))
    tmpRng.Sort Key1:=TimePoints, Order1:=xlAscending, Header:=xlNo
    
    Set TimePoints = draftWs.Range(draftWs.Cells(firstDataRowDraftWs, indexColumnTime), draftWs.Cells(lastDataRowDraftWs, indexColumnTime))
    
    Dim ThreadIDs As Collection
    If isThreadLocalized Then
        Set tmpRng = draftWs.Range(draftWs.Cells(firstDataRowDraftWs, indexColumnThread), draftWs.Cells(lastDataRowDraftWs, indexColumnThread))
        Set ThreadIDs = getCollectionOfUniqueValuesFromRange(tmpRng)
    End If
    
    Dim TmpVar As Variant
    Dim tmpRng2 As Range
    Dim SourceFilesByThreadID As Collection
    Dim SourceFiles As Collection
    If isFileLocalized Then
        z = indexColumnFile
        Set tmpRng = draftWs.Range(draftWs.Cells(firstDataRowDraftWs, z), draftWs.Cells(lastDataRowDraftWs, z))
        For Each tmpRng2 In tmpRng
            tmpRng2.Value = Replace(tmpRng2.Value, ".cpp", "")
        Next
        If isThreadLocalized Then
            Set SourceFilesByThreadID = New Collection
            k = hdrRngDraftWs.Find(What:="Thread", LookIn:=xlValues, LookAt:=xlWhole).Column
            For Each TmpVar In ThreadIDs
                draftWs.UsedRange.AutoFilter field:=k, Criteria1:=TmpVar, VisibleDropDown:=False
                Set tmpRng2 = draftWs.Range(draftWs.Cells(firstDataRowDraftWs, z), draftWs.Cells(lastDataRowDraftWs, z)).SpecialCells(xlCellTypeVisible)
                SourceFilesByThreadID.Add Item:=getCollectionOfUniqueValuesFromRange(tmpRng2), Key:=CStr(TmpVar)
                unfilterSheet draftWs
            Next
        Else
            Set SourceFiles = getCollectionOfUniqueValuesFromRange(tmpRng)
        End If
    End If
    
    Dim tmpStr As String
    Dim FunctionsBySourceFileWithThreadID As Collection
    Dim FunctionsBySourceFile As Collection
    Dim FunctionsByThreadID As Collection
    Dim Functions As Collection
    Dim TmpVar2 As Variant
    If isFunctionLocalized Then
        z = indexColumnFunction
        Set tmpRng = draftWs.Range(draftWs.Cells(firstDataRowDraftWs, z), draftWs.Cells(lastDataRowDraftWs, z))
        For Each tmpRng2 In tmpRng
            tmpStr = tmpRng2.Value
            tmpStr = Mid(tmpStr, InStrRev(tmpStr, "::") + 2)
            k = InStr(1, tmpStr, "lambda")
            If k > 0 Then
                tmpStr = Mid(tmpStr, k, InStrRev(tmpStr, ")") - k + 1)
            End If
            tmpRng2.Value = tmpStr
        Next
        If isThreadLocalized Then
            If isFileLocalized Then
                Set FunctionsBySourceFileWithThreadID = New Collection
                k = indexColumnFile
                j = indexColumnThread
                For Each TmpVar In ThreadIDs
                    tmpStr = CStr(TmpVar)
                    For Each TmpVar2 In SourceFilesByThreadID.Item(tmpStr)
                        draftWs.UsedRange.AutoFilter field:=j, Criteria1:=TmpVar, VisibleDropDown:=False
                        draftWs.UsedRange.AutoFilter field:=k, Criteria1:=TmpVar2, VisibleDropDown:=False
                        Set tmpRng2 = draftWs.Range(draftWs.Cells(firstDataRowDraftWs, z), draftWs.Cells(lastDataRowDraftWs, z)).SpecialCells(xlCellTypeVisible)
                        FunctionsBySourceFileWithThreadID.Add Item:=getCollectionOfUniqueValuesFromRange(tmpRng2), Key:=tmpStr & "|" & CStr(TmpVar2)
                        unfilterSheet draftWs
                    Next
                Next
            Else
                Set FunctionsByThreadID = New Collection
                k = indexColumnThread
                For Each TmpVar In ThreadIDs
                    draftWs.UsedRange.AutoFilter field:=k, Criteria1:=TmpVar, VisibleDropDown:=False
                    Set tmpRng2 = draftWs.Range(draftWs.Cells(firstDataRowDraftWs, z), draftWs.Cells(lastDataRowDraftWs, z)).SpecialCells(xlCellTypeVisible)
                    FunctionsByThreadID.Add Item:=getCollectionOfUniqueValuesFromRange(tmpRng2), Key:=CStr(TmpVar)
                    unfilterSheet draftWs
                Next
            End If
        Else
            If isFileLocalized Then
                Set FunctionsBySourceFile = New Collection
                k = indexColumnFile
                For Each TmpVar In SourceFiles
                    draftWs.UsedRange.AutoFilter field:=k, Criteria1:=TmpVar, VisibleDropDown:=False
                    Set tmpRng2 = draftWs.Range(draftWs.Cells(firstDataRowDraftWs, z), draftWs.Cells(lastDataRowDraftWs, z)).SpecialCells(xlCellTypeVisible)
                    FunctionsBySourceFile.Add Item:=getCollectionOfUniqueValuesFromRange(tmpRng2), Key:=CStr(TmpVar)
                    unfilterSheet draftWs
                Next
            Else
                Set Functions = getCollectionOfUniqueValuesFromRange(tmpRng)
            End If
        End If
    End If
    
    Const indexColumnTimeInNowWs As Integer = 1
    currentWs.Cells(1, 1).Value = "Time"
    Dim hdrContentToIndexColumn As New Collection
    If isThreadLocalized Then
        For k = 1 To ThreadIDs.Count Step 1
            currentWs.Cells(1, k + 1).Value = ThreadIDs.Item(k)
            hdrContentToIndexColumn.Add Item:=k + 1, Key:=CStr(ThreadIDs.Item(k))
        Next
    Else
        If isFileLocalized Then
            For k = 1 To SourceFiles.Count Step 1
                currentWs.Cells(1, k + 1).Value = SourceFiles.Item(k)
                hdrContentToIndexColumn.Add Item:=k + 1, Key:=CStr(SourceFiles.Item(k))
            Next
        Else
            For k = 1 To Functions.Count Step 1
                currentWs.Cells(1, k + 1).Value = Functions.Item(k)
                hdrContentToIndexColumn.Add Item:=k + 1, Key:=CStr(Functions.Item(k))
            Next
        End If
    End If
    Dim hdrRngNowWs As Range
    Set hdrRngNowWs = currentWs.Range(currentWs.Cells(1, 1), currentWs.Cells(1, k))
    hdrRngNowWs.Font.Bold = True
    hdrRngNowWs.HorizontalAlignment = xlCenter
    With hdrRngNowWs.Borders
        .LineStyle = xlContinuous
        .Weight = xlThick
    End With
    
    Dim tmpStr2 As String
    Dim currentMsg As String
    Dim currentHdr As String
    For Each tmpRng In TimePoints
        k = tmpRng.Row
        tmpRng.Copy Destination:=currentWs.Cells(k, indexColumnTimeInNowWs)
        currentMsg = Trim(draftWs.Cells(k, indexColumnMessage).Value)
        currentMsg = IIf(currentMsg <> "", currentMsg & Chr(10), "")
        If isThreadLocalized Then
            currentHdr = draftWs.Cells(k, indexColumnThread).Value
            If isFileLocalized Then
                tmpStr = draftWs.Cells(k, indexColumnFile).Value
                If InStr(1, currentMsg, tmpStr, vbTextCompare) = 0 Then
                    currentMsg = currentMsg & "|" & tmpStr
                End If
                If isFunctionLocalized Then
                    tmpStr2 = draftWs.Cells(k, indexColumnFunction).Value
                    If InStr(1, tmpStr2, tmpStr, vbTextCompare) = 0 Then
                        currentMsg = currentMsg & "|" & tmpStr2
                    End If
                End If
            End If
        Else
            If isFileLocalized Then
                currentHdr = draftWs.Cells(k, indexColumnFile).Value
                tmpStr = currentHdr
                currentMsg = Trim(Replace(currentMsg, tmpStr, "", 1, -1, vbTextCompare))
                If isFunctionLocalized Then
                    tmpStr2 = draftWs.Cells(k, indexColumnFunction).Value
                    If InStr(1, tmpStr2, tmpStr, vbTextCompare) = 0 Then
                        currentMsg = currentMsg & "|" & tmpStr2
                    End If
                End If
            Else
                If isFunctionLocalized Then
                    currentHdr = draftWs.Cells(k, indexColumnFunction).Value
                End If
            End If
        End If
        If isLineLocalized Then
            currentMsg = currentMsg & "|" & draftWs.Cells(k, indexColumnLine)
        End If
        currentWs.Cells(k, hdrContentToIndexColumn.Item(currentHdr)).Value = currentMsg
    Next
    
    Set tmpRng = currentWs.Range(currentWs.Cells(firstDataRowDraftWs, indexColumnTimeInNowWs), currentWs.Cells(lastDataRowDraftWs, indexColumnTimeInNowWs + hdrRngNowWs.Count - 1))
    tmpRng.HorizontalAlignment = xlCenter
    tmpRng.ColumnWidth = 254
    tmpRng.Rows.AutoFit
    tmpRng.Columns.AutoFit
    With tmpRng.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThick
    End With
    With tmpRng.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlThick
    End With
    With tmpRng.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThick
    End With
    With tmpRng.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .Weight = xlHairline
    End With
    
    Application.DisplayAlerts = False
    draftWs.Delete
    Application.DisplayAlerts = True
    
    currentWs.Activate
    On Error GoTo 0
    Exit Function
ErrorHandler4parseAnLoggerDebugResult:
    MsgBox errorInfo, vbCritical, "ERROR"
End Function

Sub alternateRowColor()
    Dim tmpRng As Range
    Set tmpRng = ActiveSheet.UsedRange
    tmpRng.FormatConditions.Delete
    With tmpRng
        .FormatConditions.Add Type:=xlExpression, Formula1:="=MOD(ROW(),6)=0"
        .FormatConditions(.FormatConditions.Count).Interior.Color = RGB(255, 255, 153) ' Light Yellow
        .FormatConditions.Add Type:=xlExpression, Formula1:="=MOD(ROW(),6)=1"
        .FormatConditions(.FormatConditions.Count).Interior.Color = RGB(204, 255, 255) 'Light Cyan
        .FormatConditions.Add Type:=xlExpression, Formula1:="=MOD(ROW(),6)=2"
        .FormatConditions(.FormatConditions.Count).Interior.Color = RGB(192, 192, 192) 'Light Grey
        .FormatConditions.Add Type:=xlExpression, Formula1:="=MOD(ROW(),6)=3"
        .FormatConditions(.FormatConditions.Count).Interior.Color = RGB(204, 255, 204) 'Light Green
        .FormatConditions.Add Type:=xlExpression, Formula1:="=MOD(ROW(),6)=4"
        .FormatConditions(.FormatConditions.Count).Interior.Color = RGB(255, 204, 153) 'Light Orange
        .FormatConditions.Add Type:=xlExpression, Formula1:="=MOD(ROW(),6)=5"
        .FormatConditions(.FormatConditions.Count).Interior.Color = RGB(204, 204, 255) 'Light Violet
    End With
End Sub

Sub Test()
    ActiveSheet.UsedRange.ColumnWidth = 254
End Sub


